/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.bank;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-05-04")
public class CreditCostsResult implements org.apache.thrift.TBase<CreditCostsResult, CreditCostsResult._Fields>, java.io.Serializable, Cloneable, Comparable<CreditCostsResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreditCostsResult");

  private static final org.apache.thrift.protocol.TField IN_REQUIRED_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("inRequiredCurrency", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField IN_NATIVE_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("inNativeCurrency", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreditCostsResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreditCostsResultTupleSchemeFactory();

  public double inRequiredCurrency; // required
  public double inNativeCurrency; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IN_REQUIRED_CURRENCY((short)1, "inRequiredCurrency"),
    IN_NATIVE_CURRENCY((short)2, "inNativeCurrency");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IN_REQUIRED_CURRENCY
          return IN_REQUIRED_CURRENCY;
        case 2: // IN_NATIVE_CURRENCY
          return IN_NATIVE_CURRENCY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INREQUIREDCURRENCY_ISSET_ID = 0;
  private static final int __INNATIVECURRENCY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IN_REQUIRED_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("inRequiredCurrency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IN_NATIVE_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("inNativeCurrency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreditCostsResult.class, metaDataMap);
  }

  public CreditCostsResult() {
  }

  public CreditCostsResult(
    double inRequiredCurrency,
    double inNativeCurrency)
  {
    this();
    this.inRequiredCurrency = inRequiredCurrency;
    setInRequiredCurrencyIsSet(true);
    this.inNativeCurrency = inNativeCurrency;
    setInNativeCurrencyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreditCostsResult(CreditCostsResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.inRequiredCurrency = other.inRequiredCurrency;
    this.inNativeCurrency = other.inNativeCurrency;
  }

  public CreditCostsResult deepCopy() {
    return new CreditCostsResult(this);
  }

  @Override
  public void clear() {
    setInRequiredCurrencyIsSet(false);
    this.inRequiredCurrency = 0.0;
    setInNativeCurrencyIsSet(false);
    this.inNativeCurrency = 0.0;
  }

  public double getInRequiredCurrency() {
    return this.inRequiredCurrency;
  }

  public CreditCostsResult setInRequiredCurrency(double inRequiredCurrency) {
    this.inRequiredCurrency = inRequiredCurrency;
    setInRequiredCurrencyIsSet(true);
    return this;
  }

  public void unsetInRequiredCurrency() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INREQUIREDCURRENCY_ISSET_ID);
  }

  /** Returns true if field inRequiredCurrency is set (has been assigned a value) and false otherwise */
  public boolean isSetInRequiredCurrency() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INREQUIREDCURRENCY_ISSET_ID);
  }

  public void setInRequiredCurrencyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INREQUIREDCURRENCY_ISSET_ID, value);
  }

  public double getInNativeCurrency() {
    return this.inNativeCurrency;
  }

  public CreditCostsResult setInNativeCurrency(double inNativeCurrency) {
    this.inNativeCurrency = inNativeCurrency;
    setInNativeCurrencyIsSet(true);
    return this;
  }

  public void unsetInNativeCurrency() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INNATIVECURRENCY_ISSET_ID);
  }

  /** Returns true if field inNativeCurrency is set (has been assigned a value) and false otherwise */
  public boolean isSetInNativeCurrency() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INNATIVECURRENCY_ISSET_ID);
  }

  public void setInNativeCurrencyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INNATIVECURRENCY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case IN_REQUIRED_CURRENCY:
      if (value == null) {
        unsetInRequiredCurrency();
      } else {
        setInRequiredCurrency((java.lang.Double)value);
      }
      break;

    case IN_NATIVE_CURRENCY:
      if (value == null) {
        unsetInNativeCurrency();
      } else {
        setInNativeCurrency((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IN_REQUIRED_CURRENCY:
      return getInRequiredCurrency();

    case IN_NATIVE_CURRENCY:
      return getInNativeCurrency();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IN_REQUIRED_CURRENCY:
      return isSetInRequiredCurrency();
    case IN_NATIVE_CURRENCY:
      return isSetInNativeCurrency();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CreditCostsResult)
      return this.equals((CreditCostsResult)that);
    return false;
  }

  public boolean equals(CreditCostsResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_inRequiredCurrency = true;
    boolean that_present_inRequiredCurrency = true;
    if (this_present_inRequiredCurrency || that_present_inRequiredCurrency) {
      if (!(this_present_inRequiredCurrency && that_present_inRequiredCurrency))
        return false;
      if (this.inRequiredCurrency != that.inRequiredCurrency)
        return false;
    }

    boolean this_present_inNativeCurrency = true;
    boolean that_present_inNativeCurrency = true;
    if (this_present_inNativeCurrency || that_present_inNativeCurrency) {
      if (!(this_present_inNativeCurrency && that_present_inNativeCurrency))
        return false;
      if (this.inNativeCurrency != that.inNativeCurrency)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(inRequiredCurrency);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(inNativeCurrency);

    return hashCode;
  }

  @Override
  public int compareTo(CreditCostsResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetInRequiredCurrency()).compareTo(other.isSetInRequiredCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInRequiredCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inRequiredCurrency, other.inRequiredCurrency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInNativeCurrency()).compareTo(other.isSetInNativeCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInNativeCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inNativeCurrency, other.inNativeCurrency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CreditCostsResult(");
    boolean first = true;

    sb.append("inRequiredCurrency:");
    sb.append(this.inRequiredCurrency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inNativeCurrency:");
    sb.append(this.inNativeCurrency);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreditCostsResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CreditCostsResultStandardScheme getScheme() {
      return new CreditCostsResultStandardScheme();
    }
  }

  private static class CreditCostsResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreditCostsResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreditCostsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IN_REQUIRED_CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.inRequiredCurrency = iprot.readDouble();
              struct.setInRequiredCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IN_NATIVE_CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.inNativeCurrency = iprot.readDouble();
              struct.setInNativeCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreditCostsResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IN_REQUIRED_CURRENCY_FIELD_DESC);
      oprot.writeDouble(struct.inRequiredCurrency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IN_NATIVE_CURRENCY_FIELD_DESC);
      oprot.writeDouble(struct.inNativeCurrency);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreditCostsResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CreditCostsResultTupleScheme getScheme() {
      return new CreditCostsResultTupleScheme();
    }
  }

  private static class CreditCostsResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreditCostsResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreditCostsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetInRequiredCurrency()) {
        optionals.set(0);
      }
      if (struct.isSetInNativeCurrency()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetInRequiredCurrency()) {
        oprot.writeDouble(struct.inRequiredCurrency);
      }
      if (struct.isSetInNativeCurrency()) {
        oprot.writeDouble(struct.inNativeCurrency);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreditCostsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.inRequiredCurrency = iprot.readDouble();
        struct.setInRequiredCurrencyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.inNativeCurrency = iprot.readDouble();
        struct.setInNativeCurrencyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

