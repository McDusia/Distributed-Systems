/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.bank;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-05-04")
public class PremiumAccountService {

  public interface Iface extends StandardAccountsService.Iface {

    public CreditCostsResult creditCosts(java.lang.String GUID_number, CurrencyType currency, Period period) throws InvalidArguments, org.apache.thrift.TException;

  }

  public interface AsyncIface extends StandardAccountsService .AsyncIface {

    public void creditCosts(java.lang.String GUID_number, CurrencyType currency, Period period, org.apache.thrift.async.AsyncMethodCallback<CreditCostsResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends StandardAccountsService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CreditCostsResult creditCosts(java.lang.String GUID_number, CurrencyType currency, Period period) throws InvalidArguments, org.apache.thrift.TException
    {
      send_creditCosts(GUID_number, currency, period);
      return recv_creditCosts();
    }

    public void send_creditCosts(java.lang.String GUID_number, CurrencyType currency, Period period) throws org.apache.thrift.TException
    {
      creditCosts_args args = new creditCosts_args();
      args.setGUID_number(GUID_number);
      args.setCurrency(currency);
      args.setPeriod(period);
      sendBase("creditCosts", args);
    }

    public CreditCostsResult recv_creditCosts() throws InvalidArguments, org.apache.thrift.TException
    {
      creditCosts_result result = new creditCosts_result();
      receiveBase(result, "creditCosts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "creditCosts failed: unknown result");
    }

  }
  public static class AsyncClient extends StandardAccountsService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void creditCosts(java.lang.String GUID_number, CurrencyType currency, Period period, org.apache.thrift.async.AsyncMethodCallback<CreditCostsResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      creditCosts_call method_call = new creditCosts_call(GUID_number, currency, period, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class creditCosts_call extends org.apache.thrift.async.TAsyncMethodCall<CreditCostsResult> {
      private java.lang.String GUID_number;
      private CurrencyType currency;
      private Period period;
      public creditCosts_call(java.lang.String GUID_number, CurrencyType currency, Period period, org.apache.thrift.async.AsyncMethodCallback<CreditCostsResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.GUID_number = GUID_number;
        this.currency = currency;
        this.period = period;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("creditCosts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        creditCosts_args args = new creditCosts_args();
        args.setGUID_number(GUID_number);
        args.setCurrency(currency);
        args.setPeriod(period);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CreditCostsResult getResult() throws InvalidArguments, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_creditCosts();
      }
    }

  }

  public static class Processor<I extends Iface> extends StandardAccountsService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("creditCosts", new creditCosts());
      return processMap;
    }

    public static class creditCosts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, creditCosts_args> {
      public creditCosts() {
        super("creditCosts");
      }

      public creditCosts_args getEmptyArgsInstance() {
        return new creditCosts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public creditCosts_result getResult(I iface, creditCosts_args args) throws org.apache.thrift.TException {
        creditCosts_result result = new creditCosts_result();
        try {
          result.success = iface.creditCosts(args.GUID_number, args.currency, args.period);
        } catch (InvalidArguments ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends StandardAccountsService.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("creditCosts", new creditCosts());
      return processMap;
    }

    public static class creditCosts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, creditCosts_args, CreditCostsResult> {
      public creditCosts() {
        super("creditCosts");
      }

      public creditCosts_args getEmptyArgsInstance() {
        return new creditCosts_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CreditCostsResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CreditCostsResult>() { 
          public void onComplete(CreditCostsResult o) {
            creditCosts_result result = new creditCosts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            creditCosts_result result = new creditCosts_result();
            if (e instanceof InvalidArguments) {
              result.ex = (InvalidArguments) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, creditCosts_args args, org.apache.thrift.async.AsyncMethodCallback<CreditCostsResult> resultHandler) throws org.apache.thrift.TException {
        iface.creditCosts(args.GUID_number, args.currency, args.period,resultHandler);
      }
    }

  }

  public static class creditCosts_args implements org.apache.thrift.TBase<creditCosts_args, creditCosts_args._Fields>, java.io.Serializable, Cloneable, Comparable<creditCosts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("creditCosts_args");

    private static final org.apache.thrift.protocol.TField GUID_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("GUID_number", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("period", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new creditCosts_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new creditCosts_argsTupleSchemeFactory();

    public java.lang.String GUID_number; // required
    /**
     * 
     * @see CurrencyType
     */
    public CurrencyType currency; // required
    public Period period; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GUID_NUMBER((short)1, "GUID_number"),
      /**
       * 
       * @see CurrencyType
       */
      CURRENCY((short)2, "currency"),
      PERIOD((short)3, "period");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GUID_NUMBER
            return GUID_NUMBER;
          case 2: // CURRENCY
            return CURRENCY;
          case 3: // PERIOD
            return PERIOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GUID_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("GUID_number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "GUID")));
      tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CurrencyType.class)));
      tmpMap.put(_Fields.PERIOD, new org.apache.thrift.meta_data.FieldMetaData("period", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Period.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(creditCosts_args.class, metaDataMap);
    }

    public creditCosts_args() {
    }

    public creditCosts_args(
      java.lang.String GUID_number,
      CurrencyType currency,
      Period period)
    {
      this();
      this.GUID_number = GUID_number;
      this.currency = currency;
      this.period = period;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public creditCosts_args(creditCosts_args other) {
      if (other.isSetGUID_number()) {
        this.GUID_number = other.GUID_number;
      }
      if (other.isSetCurrency()) {
        this.currency = other.currency;
      }
      if (other.isSetPeriod()) {
        this.period = new Period(other.period);
      }
    }

    public creditCosts_args deepCopy() {
      return new creditCosts_args(this);
    }

    @Override
    public void clear() {
      this.GUID_number = null;
      this.currency = null;
      this.period = null;
    }

    public java.lang.String getGUID_number() {
      return this.GUID_number;
    }

    public creditCosts_args setGUID_number(java.lang.String GUID_number) {
      this.GUID_number = GUID_number;
      return this;
    }

    public void unsetGUID_number() {
      this.GUID_number = null;
    }

    /** Returns true if field GUID_number is set (has been assigned a value) and false otherwise */
    public boolean isSetGUID_number() {
      return this.GUID_number != null;
    }

    public void setGUID_numberIsSet(boolean value) {
      if (!value) {
        this.GUID_number = null;
      }
    }

    /**
     * 
     * @see CurrencyType
     */
    public CurrencyType getCurrency() {
      return this.currency;
    }

    /**
     * 
     * @see CurrencyType
     */
    public creditCosts_args setCurrency(CurrencyType currency) {
      this.currency = currency;
      return this;
    }

    public void unsetCurrency() {
      this.currency = null;
    }

    /** Returns true if field currency is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrency() {
      return this.currency != null;
    }

    public void setCurrencyIsSet(boolean value) {
      if (!value) {
        this.currency = null;
      }
    }

    public Period getPeriod() {
      return this.period;
    }

    public creditCosts_args setPeriod(Period period) {
      this.period = period;
      return this;
    }

    public void unsetPeriod() {
      this.period = null;
    }

    /** Returns true if field period is set (has been assigned a value) and false otherwise */
    public boolean isSetPeriod() {
      return this.period != null;
    }

    public void setPeriodIsSet(boolean value) {
      if (!value) {
        this.period = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case GUID_NUMBER:
        if (value == null) {
          unsetGUID_number();
        } else {
          setGUID_number((java.lang.String)value);
        }
        break;

      case CURRENCY:
        if (value == null) {
          unsetCurrency();
        } else {
          setCurrency((CurrencyType)value);
        }
        break;

      case PERIOD:
        if (value == null) {
          unsetPeriod();
        } else {
          setPeriod((Period)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GUID_NUMBER:
        return getGUID_number();

      case CURRENCY:
        return getCurrency();

      case PERIOD:
        return getPeriod();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GUID_NUMBER:
        return isSetGUID_number();
      case CURRENCY:
        return isSetCurrency();
      case PERIOD:
        return isSetPeriod();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof creditCosts_args)
        return this.equals((creditCosts_args)that);
      return false;
    }

    public boolean equals(creditCosts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_GUID_number = true && this.isSetGUID_number();
      boolean that_present_GUID_number = true && that.isSetGUID_number();
      if (this_present_GUID_number || that_present_GUID_number) {
        if (!(this_present_GUID_number && that_present_GUID_number))
          return false;
        if (!this.GUID_number.equals(that.GUID_number))
          return false;
      }

      boolean this_present_currency = true && this.isSetCurrency();
      boolean that_present_currency = true && that.isSetCurrency();
      if (this_present_currency || that_present_currency) {
        if (!(this_present_currency && that_present_currency))
          return false;
        if (!this.currency.equals(that.currency))
          return false;
      }

      boolean this_present_period = true && this.isSetPeriod();
      boolean that_present_period = true && that.isSetPeriod();
      if (this_present_period || that_present_period) {
        if (!(this_present_period && that_present_period))
          return false;
        if (!this.period.equals(that.period))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetGUID_number()) ? 131071 : 524287);
      if (isSetGUID_number())
        hashCode = hashCode * 8191 + GUID_number.hashCode();

      hashCode = hashCode * 8191 + ((isSetCurrency()) ? 131071 : 524287);
      if (isSetCurrency())
        hashCode = hashCode * 8191 + currency.getValue();

      hashCode = hashCode * 8191 + ((isSetPeriod()) ? 131071 : 524287);
      if (isSetPeriod())
        hashCode = hashCode * 8191 + period.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(creditCosts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetGUID_number()).compareTo(other.isSetGUID_number());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGUID_number()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GUID_number, other.GUID_number);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrency()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPeriod()).compareTo(other.isSetPeriod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeriod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.period, other.period);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("creditCosts_args(");
      boolean first = true;

      sb.append("GUID_number:");
      if (this.GUID_number == null) {
        sb.append("null");
      } else {
        sb.append(this.GUID_number);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("period:");
      if (this.period == null) {
        sb.append("null");
      } else {
        sb.append(this.period);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (period != null) {
        period.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class creditCosts_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public creditCosts_argsStandardScheme getScheme() {
        return new creditCosts_argsStandardScheme();
      }
    }

    private static class creditCosts_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<creditCosts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, creditCosts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GUID_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.GUID_number = iprot.readString();
                struct.setGUID_numberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENCY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.currency = thrift.bank.CurrencyType.findByValue(iprot.readI32());
                struct.setCurrencyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PERIOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.period = new Period();
                struct.period.read(iprot);
                struct.setPeriodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, creditCosts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.GUID_number != null) {
          oprot.writeFieldBegin(GUID_NUMBER_FIELD_DESC);
          oprot.writeString(struct.GUID_number);
          oprot.writeFieldEnd();
        }
        if (struct.currency != null) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeI32(struct.currency.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.period != null) {
          oprot.writeFieldBegin(PERIOD_FIELD_DESC);
          struct.period.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class creditCosts_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public creditCosts_argsTupleScheme getScheme() {
        return new creditCosts_argsTupleScheme();
      }
    }

    private static class creditCosts_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<creditCosts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, creditCosts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGUID_number()) {
          optionals.set(0);
        }
        if (struct.isSetCurrency()) {
          optionals.set(1);
        }
        if (struct.isSetPeriod()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGUID_number()) {
          oprot.writeString(struct.GUID_number);
        }
        if (struct.isSetCurrency()) {
          oprot.writeI32(struct.currency.getValue());
        }
        if (struct.isSetPeriod()) {
          struct.period.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, creditCosts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.GUID_number = iprot.readString();
          struct.setGUID_numberIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currency = thrift.bank.CurrencyType.findByValue(iprot.readI32());
          struct.setCurrencyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.period = new Period();
          struct.period.read(iprot);
          struct.setPeriodIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class creditCosts_result implements org.apache.thrift.TBase<creditCosts_result, creditCosts_result._Fields>, java.io.Serializable, Cloneable, Comparable<creditCosts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("creditCosts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new creditCosts_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new creditCosts_resultTupleSchemeFactory();

    public CreditCostsResult success; // required
    public InvalidArguments ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CreditCostsResult.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidArguments.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(creditCosts_result.class, metaDataMap);
    }

    public creditCosts_result() {
    }

    public creditCosts_result(
      CreditCostsResult success,
      InvalidArguments ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public creditCosts_result(creditCosts_result other) {
      if (other.isSetSuccess()) {
        this.success = new CreditCostsResult(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new InvalidArguments(other.ex);
      }
    }

    public creditCosts_result deepCopy() {
      return new creditCosts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public CreditCostsResult getSuccess() {
      return this.success;
    }

    public creditCosts_result setSuccess(CreditCostsResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidArguments getEx() {
      return this.ex;
    }

    public creditCosts_result setEx(InvalidArguments ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CreditCostsResult)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((InvalidArguments)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof creditCosts_result)
        return this.equals((creditCosts_result)that);
      return false;
    }

    public boolean equals(creditCosts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(creditCosts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("creditCosts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class creditCosts_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public creditCosts_resultStandardScheme getScheme() {
        return new creditCosts_resultStandardScheme();
      }
    }

    private static class creditCosts_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<creditCosts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, creditCosts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CreditCostsResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new InvalidArguments();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, creditCosts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class creditCosts_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public creditCosts_resultTupleScheme getScheme() {
        return new creditCosts_resultTupleScheme();
      }
    }

    private static class creditCosts_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<creditCosts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, creditCosts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, creditCosts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CreditCostsResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new InvalidArguments();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
